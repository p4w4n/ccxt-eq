<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\zerodha as Exchange;
use ccxt\ExchangeError;
use ccxt\AuthenticationError;
use ccxt\InvalidOrder;
use ccxt\RateLimitExceeded;
use ccxt\ExchangeNotAvailable;
use \React\Async;
use \React\Promise;
use \React\Promise\PromiseInterface;

class zerodha extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'zerodha',
            'name' => 'Zerodha',
            'countries' => array( 'IN' ), // India
            'rateLimit' => 100, // 10 requests per second = 100ms between requests
            'version' => 'v3',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false, // Set to true when F&O is implemented
                'option' => false, // Set to true when F&O is implemented
                'cancelOrder' => true,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchTicker' => true,
                'fetchTickers' => true, // Emulated with multiple fetchTicker calls
            ),
            'timeframes' => array(
                '1m' => 'minute',
                '3m' => '3minute',
                '5m' => '5minute',
                '10m' => '10minute',
                '15m' => '15minute',
                '30m' => '30minute',
                '1h' => '60minute',
                '1d' => 'day',
            ),
            'urls' => array(
                'logo' => 'https://zerodha.com/static/images/logo.svg',
                'api' => array(
                    'public' => 'https://api.kite.trade',
                    'private' => 'https://api.kite.trade',
                ),
                'www' => 'https://zerodha.com',
                'doc' => array(
                    'https://kite.trade/docs/connect/v3/',
                ),
                'fees' => 'https://zerodha.com/pricing',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'instruments',
                        'instruments/{exchange}',
                        'quote',
                        'quote/ltp',
                        'quote/ohlc',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'user/profile',
                        'user/margins',
                        'user/margins/{segment}',
                        'portfolio/positions',
                        'portfolio/holdings',
                        'orders',
                        'orders/{order_id}',
                        'trades',
                        'trades/{order_id}',
                        'instruments/historical/{instrument_token}/{interval}',
                    ),
                    'post' => array(
                        'orders/{variety}',
                        'orders/{variety}/{order_id}',
                        'portfolio/positions',
                    ),
                    'put' => array(
                        'orders/{variety}/{order_id}',
                    ),
                    'delete' => array(
                        'orders/{variety}/{order_id}',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0'),
                    'taker' => $this->parse_number('0.0325'), // 0.0325% per side for equity delivery
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'password' => false, // Repurposed for access_token
                'login' => false,
                'privateKey' => false,
                'walletAddress' => false,
                'token' => false,
            ),
            'exceptions' => array(
                'exact' => array(
                    'TokenException' => '\\ccxt\\AuthenticationError',
                    'UserException' => '\\ccxt\\PermissionDenied',
                    'OrderException' => '\\ccxt\\InvalidOrder',
                    'InputException' => '\\ccxt\\BadRequest',
                    'MarginException' => '\\ccxt\\InsufficientFunds',
                    'HoldingException' => '\\ccxt\\InsufficientFunds',
                    'NetworkException' => '\\ccxt\\NetworkError',
                    'DataException' => '\\ccxt\\ExchangeError',
                    'GeneralException' => '\\ccxt\\ExchangeError',
                ),
                'broad' => array(
                    'Invalid API credentials' => '\\ccxt\\AuthenticationError',
                    'Insufficient funds' => '\\ccxt\\InsufficientFunds',
                    'Order not found' => '\\ccxt\\InvalidOrder',
                    'Rate limit exceeded' => '\\ccxt\\RateLimitExceeded',
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'paddingMode' => 'NO_PADDING',
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches all available trading instruments and creates unified $market structure
             * @see https://kite.trade/docs/connect/v3/market/
             * @param {array} [$params] extra parameters specific to the $exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetInstruments ($params));
            $markets => Marketarray() = array();
            for ($i = 0; $i < count($response); $i++) {
                $market = $response[$i];
                $exchange = $this->safe_string($market, 'exchange');
                $tradingSymbol = $this->safe_string($market, 'tradingsymbol');
                $instrumentType = $this->safe_string($market, 'instrument_type');
                // Focus on equity instruments for now (extensible to F&O later)
                if ($instrumentType === 'EQ') {
                    $id = $this->safe_string($market, 'instrument_token');
                    $base = $exchange . ':' . $tradingSymbol;
                    $quote = 'INR';
                    $symbol = $base . '/' . $quote;
                    // Parse precision from tick_size
                    $tickSize = $this->safe_number($market, 'tick_size', 0.05);
                    $lotSize = $this->safe_integer($market, 'lot_size', 1);
                    $markets[] = array(
                        'id' => $id,
                        'symbol' => $symbol,
                        'base' => $base,
                        'quote' => $quote,
                        'settle' => null,
                        'baseId' => $tradingSymbol,
                        'quoteId' => 'INR',
                        'settleId' => null,
                        'type' => 'spot',
                        'spot' => true,
                        'margin' => false,
                        'swap' => false,
                        'future' => false,
                        'option' => false,
                        'active' => true,
                        'contract' => false,
                        'linear' => null,
                        'inverse' => null,
                        'contractSize' => null,
                        'expiry' => null,
                        'expiryDatetime' => null,
                        'strike' => null,
                        'optionType' => null,
                        'precision' => array(
                            'amount' => $lotSize,
                            'price' => $tickSize,
                        ),
                        'limits' => array(
                            'leverage' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'amount' => array(
                                'min' => $lotSize,
                                'max' => null,
                            ),
                            'price' => array(
                                'min' => $tickSize,
                                'max' => null,
                            ),
                            'cost' => array(
                                'min' => null,
                                'max' => null,
                            ),
                        ),
                        'created' => null,
                        'info' => $market,
                    );
                }
            }
            return $markets;
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker
             * @see https://kite.trade/docs/connect/v3/market/
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ticker structure
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            // Zerodha quote endpoint expects format 'EXCHANGE:TRADINGSYMBOL'
            $instrument = $market['info']['exchange'] . ':' . $market['info']['tradingsymbol'];
            $request = array(
                'i' => $instrument,
            );
            $response = Async\await($this->publicGetQuote ($this->extend($request, $params)));
            $tickerData = $this->safe_value($response['data'], $instrument);
            return $this->parse_ticker($tickerData, $market);
        }) ();
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        $timestamp = $this->parse8601($this->safe_string($ticker, 'timestamp'));
        $last = $this->safe_number($ticker, 'last_price');
        $ohlc = $this->safe_value($ticker, 'ohlc', array());
        $depth = $this->safe_value($ticker, 'depth', array());
        $buyDepth = $this->safe_value($depth, 'buy', array());
        $sellDepth = $this->safe_value($depth, 'sell', array());
        $bid = (strlen($buyDepth) > 0) ? $this->safe_number($buyDepth[0], 'price') : null;
        $ask = (strlen($sellDepth) > 0) ? $this->safe_number($sellDepth[0], 'price') : null;
        $bidVolume = (strlen($buyDepth) > 0) ? $this->safe_number($buyDepth[0], 'quantity') : null;
        $askVolume = (strlen($sellDepth) > 0) ? $this->safe_number($sellDepth[0], 'quantity') : null;
        $symbol = $this->safe_string($market, 'symbol');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_number($ohlc, 'high'),
            'low' => $this->safe_number($ohlc, 'low'),
            'bid' => $bid,
            'bidVolume' => $bidVolume,
            'ask' => $ask,
            'askVolume' => $askVolume,
            'vwap' => null,
            'open' => $this->safe_number($ohlc, 'open'),
            'close' => $last,
            'last' => $last,
            'previousClose' => $this->safe_number($ohlc, 'close'),
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_number($ticker, 'volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple $symbols
             * Implemented by making multiple fetchTicker calls due to Zerodha API limitations
             * @see https://kite.trade/docs/connect/v3/market/
             * @param {string[]} [$symbols] unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of $ticker structures
             */
            Async\await($this->load_markets());
            if ($symbols === null) {
                $symbols = $this->symbols;
            } elseif (gettype($symbols) === 'string') {
                $symbols = array( $symbols );
            }
            // For large numbers of $symbols, we should consider batching to avoid rate limits
            // Zerodha allows 10 requests per second, so we batch the requests
            $tickers = array();
            // Use batch processing to respect rate limits
            $batchSize = 8; // Conservative batch size to stay under rate limits
            for ($i = 0; $i < count($symbols); $i .= $batchSize) {
                $batchSymbols = mb_substr($symbols, $i, $i . $batchSize - $i);
                // Make concurrent requests for each batch
                for ($j = 0; $j < count($batchSymbols); $j++) {
                    $symbol = $batchSymbols[$j];
                    try {
                        $ticker = Async\await($this->fetch_ticker($symbol, $params));
                        $tickers[$symbol] = $ticker;
                    } catch (Exception $e) {
                        // Skip $symbols that fail to fetch, but continue with others
                        // $this->log('fetch_tickers failed for symbol', $symbol, (string) $e);
                        continue;
                    }
                }
                // Small delay between batches to respect rate limits (100ms rateLimit)
                if ($i . $batchSize < strlen($symbols)) {
                    Async\await($this->sleep(100)); // 100ms delay
                }
            }
            return $tickers;
        }) ();
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data
             * @see https://kite.trade/docs/connect/v3/historical/
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of $candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of $candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instrument_token' => $market['id'],
                'interval' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            // Calculate date range based on $since and $limit
            if ($since !== null) {
                $request['from'] = $this->yyyymmdd($since, '-');
            } else {
                // Default to last 30 days if no $since parameter
                $now = $this->milliseconds();
                $thirtyDaysAgo = $now - (30 * 24 * 60 * 60 * 1000);
                $request['from'] = $this->yyyymmdd($thirtyDaysAgo, '-');
            }
            // Set 'to' date to today
            $request['to'] = $this->yyyymmdd($this->milliseconds(), '-');
            $response = Async\await($this->privateGetInstrumentsHistoricalInstrumentTokenInterval ($this->extend($request, $params)));
            $candles = $this->safe_value($response['data'], 'candles', array());
            return $this->parse_ohlcvs($candles, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv(array $ohlcv, ?array $market = null, $timeframe = '1m', ?int $since = null, ?int $limit = null): array {
        return [
            $this->parse8601($ohlcv[0]),
            $this->safe_number($ohlcv, 1), // open
            $this->safe_number($ohlcv, 2), // high
            $this->safe_number($ohlcv, 3), // low
            $this->safe_number($ohlcv, 4), // close
            $this->safe_number($ohlcv, 5), // volume
        ];
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds $available for trading
             * @see https://kite.trade/docs/connect/v3/user/
             * @see https://kite.trade/docs/connect/v3/portfolio/
             * @param {array} [$params] extra parameters specific to the $exchange API endpoint
             * @return {array} a balance structure
             */
            Async\await($this->load_markets());
            // Fetch both cash margins and stock $holdings
            list($marginResponse, $holdingsResponse) = Async\await(Promise\all(array(
                $this->privateGetUserMargins ($params),
                $this->privateGetPortfolioHoldings ($params),
            )));
            $result = array(
                'info' => array(
                    'margins' => $marginResponse,
                    'holdings' => $holdingsResponse,
                ),
            );
            // Parse cash balance from margins
            $equityMargins = $this->safe_value($marginResponse['data'], 'equity');
            if ($equityMargins) {
                $available = $this->safe_value($equityMargins, 'available', array());
                $cashAvailable = $this->safe_number($available, 'cash', 0);
                $netBalance = $this->safe_number($equityMargins, 'net', 0);
                $result['INR'] = $this->account();
                $result['INR']['free'] = $cashAvailable;
                $result['INR']['total'] = $netBalance;
                $result['INR']['used'] = max (0, $netBalance - $cashAvailable);
            }
            // Parse stock $holdings
            $holdings = $this->safe_value($holdingsResponse, 'data', array());
            for ($i = 0; $i < count($holdings); $i++) {
                $holding = $holdings[$i];
                $tradingSymbol = $this->safe_string($holding, 'tradingsymbol');
                $exchange = $this->safe_string($holding, 'exchange');
                $quantity = $this->safe_number($holding, 'quantity', 0);
                // Find the $market to get unified symbol
                $marketId = $exchange . ':' . $tradingSymbol . '/INR';
                $market = $this->safe_market($marketId);
                if ($market && $quantity > 0) {
                    $base = $market['base'];
                    $result[$base] = $this->account();
                    $result[$base]['total'] = $quantity;
                    $result[$base]['free'] = $quantity; // Assuming all $holdings are free to trade
                    $result[$base]['used'] = 0;
                }
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://kite.trade/docs/connect/v3/orders/
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fulfilled, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} $params->product 'CNC' for Cash and Carry, 'MIS' for Margin Intraday (REQUIRED)
             * @param {string} [$params->variety] 'regular', 'amo', 'co' (default => 'regular')
             * @param {string} [$params->validity] 'DAY', 'IOC' (default => 'DAY')
             * @param {float} [$params->trigger_price] trigger $price for stop orders
             * @return {array} an order structure
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            // Product parameter is mandatory for Zerodha
            $product = $this->safe_string($params, 'product');
            if ($product === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires the "product" parameter (e.g., "CNC", "MIS") in params');
            }
            $variety = $this->safe_string($params, 'variety', 'regular');
            $validity = $this->safe_string($params, 'validity', 'DAY');
            $request = array(
                'variety' => $variety,
                'tradingsymbol' => $market['baseId'],
                'exchange' => $market['info']['exchange'],
                'transaction_type' => strtoupper($side),
                'order_type' => strtoupper($type),
                'quantity' => $this->amount_to_precision($symbol, $amount),
                'product' => strtoupper($product),
                'validity' => strtoupper($validity),
            );
            if ($type === 'limit') {
                if ($price === null) {
                    throw new InvalidOrder($this->id . ' createOrder() requires a $price argument for limit orders');
                }
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $triggerPrice = $this->safe_number($params, 'trigger_price');
            if ($triggerPrice !== null) {
                $request['trigger_price'] = $this->price_to_precision($symbol, $triggerPrice);
            }
            $omitted = $this->omit($params, array( 'product', 'variety', 'validity', 'trigger_price' ));
            $response = Async\await($this->privatePostOrdersVariety ($this->extend($request, $omitted)));
            $orderId = $this->safe_string($response['data'], 'order_id');
            return $this->safe_order(array(
                'id' => $orderId,
                'info' => $response,
            ), $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://kite.trade/docs/connect/v3/orders/
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->variety] 'regular', 'amo', 'co' (default => 'regular')
             * @return {array} An order structure
             */
            $variety = $this->safe_string($params, 'variety', 'regular');
            $request = array(
                'variety' => $variety,
                'order_id' => $id,
            );
            $omitted = $this->omit($params, array( 'variety' ));
            $response = Async\await($this->privateDeleteOrdersVarietyOrderId ($this->extend($request, $omitted)));
            return $this->parse_order($response['data']);
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://kite.trade/docs/connect/v3/orders/
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An order structure
             */
            $request = array(
                'order_id' => $id,
            );
            $response = Async\await($this->privateGetOrdersOrderId ($this->extend($request, $params)));
            $orders = $this->safe_value($response, 'data', array());
            if (gettype($orders) !== 'array' || array_keys($orders) !== array_keys(array_keys($orders)) || strlen($orders) === 0) {
                throw new InvalidOrder($this->id . ' order ' . $id . ' not found');
            }
            return $this->parse_order($orders[0]);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open $orders
             * @see https://kite.trade/docs/connect/v3/orders/
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open $orders for
             * @param {int} [$limit] the maximum number of open $orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of order structures
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetOrders ($params));
            $orders = $this->safe_value($response, 'data', array());
            $openStatuses = array( 'OPEN', 'TRIGGER PENDING' );
            $openOrders = $orders->filter ((order) => $openStatuses->includes ($this->safe_string(order, 'status')));
            return $this->parse_orders($openOrders, null, $since, $limit);
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed $orders made by the user
             * @see https://kite.trade/docs/connect/v3/orders/
             * @param {string} $symbol unified market $symbol of the market $orders were made in
             * @param {int} [$since] the earliest time in ms to fetch $orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of order structures
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetOrders ($params));
            $orders = $this->safe_value($response, 'data', array());
            $closedStatuses = array( 'COMPLETE', 'CANCELLED', 'REJECTED' );
            $closedOrders = $orders->filter ((order) => $closedStatuses->includes ($this->safe_string(order, 'status')));
            return $this->parse_orders($closedOrders, null, $since, $limit);
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all $trades made by the user
             * @see https://kite.trade/docs/connect/v3/orders/
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch $trades for
             * @param {int} [$limit] the maximum number of $trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of trade structures
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetTrades ($params));
            $trades = $this->safe_value($response, 'data', array());
            return $this->parse_trades($trades, null, $since, $limit);
        }) ();
    }

    public function parse_order(array $order, ?array $market = null): array {
        $statusMap = array(
            'OPEN' => 'open',
            'TRIGGER PENDING' => 'open',
            'COMPLETE' => 'closed',
            'CANCELLED' => 'canceled',
            'REJECTED' => 'rejected',
        );
        $id = $this->safe_string($order, 'order_id');
        $status = $this->safe_string($statusMap, $this->safe_string($order, 'status'));
        $exchange = $this->safe_string($order, 'exchange');
        $tradingSymbol = $this->safe_string($order, 'tradingsymbol');
        $marketId = $exchange . ':' . $tradingSymbol . '/INR';
        $market = $this->safe_market($marketId, $market);
        $symbol = $this->safe_string($market, 'symbol');
        $timestamp = $this->parse8601($this->safe_string($order, 'order_timestamp'));
        $type = $this->safe_string_lower($order, 'order_type');
        $side = $this->safe_string_lower($order, 'transaction_type');
        $amount = $this->safe_number($order, 'quantity');
        $filled = $this->safe_number($order, 'filled_quantity');
        $remaining = $this->safe_number($order, 'pending_quantity');
        $price = $this->safe_number($order, 'price');
        $average = $this->safe_number($order, 'average_price');
        $stopPrice = $this->safe_number($order, 'trigger_price');
        $cost = null;
        if ($filled !== null && $average !== null) {
            $cost = $filled * $average;
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $this->safe_string($order, 'tag'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $this->safe_string_upper($order, 'validity'),
            'postOnly' => null,
            'side' => $side,
            'amount' => $amount,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'triggerPrice' => $stopPrice,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => null, // Fee information is typically in trade data
            'trades' => array(),
        ), $market);
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        $id = $this->safe_string($trade, 'trade_id');
        $orderId = $this->safe_string($trade, 'order_id');
        $exchange = $this->safe_string($trade, 'exchange');
        $tradingSymbol = $this->safe_string($trade, 'tradingsymbol');
        $marketId = $exchange . ':' . $tradingSymbol . '/INR';
        $market = $this->safe_market($marketId, $market);
        $symbol = $this->safe_string($market, 'symbol');
        $timestamp = $this->parse8601($this->safe_string($trade, 'fill_timestamp'));
        $side = $this->safe_string_lower($trade, 'transaction_type');
        $amount = $this->safe_number($trade, 'quantity');
        $price = $this->safe_number($trade, 'price');
        $cost = null;
        if ($amount !== null && $price !== null) {
            $cost = $amount * $price;
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'amount' => $amount,
            'price' => $price,
            'cost' => $cost,
            'fee' => null, // Fee calculation would need additional data
        ), $market);
    }

    public function sign(string $path, $api = 'public', $method = 'GET', $params = array (), mixed $headers = null, mixed $body = null): mixed {
        $url = $this->urls['api'][$api] . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'private') {
            $this->check_required_credentials();
            // Check if access token is available
            if (!$this->password) {
                throw new AuthenticationError($this->id . ' access token is missing. Please provide it in the "password" field or use the generate_token.py script.');
            }
            $headers = array(
                'X-Kite-Version' => $this->version,
                'Authorization' => 'token ' . $this->apiKey . ':' . $this->password,
            );
        }
        if ($method === 'GET') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            if ($query) {
                $body = $this->urlencode($query);
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors(int $code, string $reason, string $url, string $method, array $headers, string $body, mixed $response, mixed $requestHeaders, mixed $requestBody): mixed {
        if ($response === null) {
            return;
        }
        // Zerodha API returns property_exists($this, errors) format:
        // array("status" => "error", "message" => "Error $message", "error_type" => "TokenException")
        $status = $this->safe_string($response, 'status');
        if ($status === 'error') {
            $errorType = $this->safe_string($response, 'error_type');
            $message = $this->safe_string($response, 'message');
            $feedback = $this->id . ' ' . $message;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorType, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
        // Handle rate limit errors
        if ($code === 429) {
            throw new RateLimitExceeded($this->id . ' rate limit exceeded');
        }
        // Handle server errors
        if ($code >= 500) {
            throw new ExchangeNotAvailable($this->id . ' server error => ' . $body);
        }
    }
}
